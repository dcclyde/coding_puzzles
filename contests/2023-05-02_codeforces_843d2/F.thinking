
N <= 4e5.

Perimeter = 2*R + 2*C.

Version 1: Find any optimal answer.
Version 2: Count optimal answers mod P.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

? Version 1 should be easy.
Find the smallest S such that S^2 is big enough.
Also find smallest K such that K*(K+1) is big enough.
Then just fill stuff in order within that rectangle.



? Version 2?
I need to place G gaps.
What are the constraints on placement?
Can't have a gap that sees filled cells both E and W, even at a distance.

Precomputing is OK, but then I need to be solving cases in log(N) time.

N is up to 4e5.
R, C <= 632.
So there are only 1200 different rectangles I might care about.
~ Remember that rotating counts as a valid different configuration.
    For example, 10x11 vs 11x10.

Probably it's possible to compute all possible answers?
This is also why they provide MOD at runtime.

*****

Gaps can never take up a whole row or column.
So it's just a matter of choosing gap configurations at each corner.

* If I know what's going on at one corner,
* then I can FFT to get (generating function)^4 and win.
*     or actually.. even N^2 mulitplication is fine.


If first row has r, then from here we have dp[r][C][g-r] ways.


dp[r][c][g] = ways to use g gaps in <= r rows and <= c columns.

dp[r][c][g] = sum of...
    k items in first row. k <= c.
        dp[r-1][k][g-k] ways to use remaining gaps in remaining rows.

        sum over k of prev[k][g-k]. prev is cut off at c.
        Can I datastructures / FFT this?

* only consider R <= C <= G

    dp[6][6][6]:
        dp(5, 1, 5)
        dp(5, 2, 4)
        dp(5, 3, 3)
        dp(5, 4, 2)
        dp(5, 5, 1)
        dp(5, 6, 0)

    Some future guy will need this stuff too though?
    dp[5, 6, 6]

    dp[5, 6, 4]
        dp(4, 1, 3)
        dp(4, 2, 2)
        dp(4, 3, 1)
        dp(4, 4, 0)

    dp(5, 5, 7)
        4 1 6
        4 2 5
        4 3 4
        4 4 3
        4 5 2
        // 4 6 1
        // 4 7 0

    dp(5, 6, 7)
        4 1 6
        4 2 5
        4 3 4
        4 4 3
        4 5 2
        4 6 1
        // 4 7 0


    dp(r, c, g) = ?
        If c > r: use dp(r, c-1, g) + dp(r-1, c, g-c)
        If c == r: use dp(r-1, c, g) + dp(r-1, c, g-c)?


Also need to handle:
Are there different (R, C) combinations that would work?



.
