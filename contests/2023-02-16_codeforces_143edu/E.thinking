
N <= 3e5
health all <= 1e6... I probably should use that somehow.

The main question is just - who should I explode?
Explosion will kill the longest strictly decreasing subseq in each direction.

If I explode guy K...
How much does it cost to solve the RHS?

Call this f[K].
How can I compute f[K-1]?

Well...

f[K-1] includes the costs from f[K].
If dat[K] > dat[K+1], no more cost.
Otherwise, I need to reduce first several guys.

I guess - find the latest guy who'll get reduced. Then set
    h[K+1] = dat[K] - 1
    h[K+2] = dat[K] - 2
    ...

Latest reduced guy = first guy with h[K+j] <= dat[K] - j.

---

segtree setup:
I guess instead of storing h[k], I can store h[k] + k.
Then I need smallest total I can subtract so that the result is non-increasing.
Add a new thing on the front --> set some prefix of existing stuff to equal the new guy.

-----

I had [3, 8, 5, 7, 7, 6].
Process 7: OK
process 5: Need to adjust all later ones.

-----

! I need to avoid setting guys to negative health.
st[k] should never be < k.

[5, 11, 17, 13]
then [5, 11, 11, 11]


[1, 3, 2, 4, 5, 8]
[1, 3, 2, 4, 5, 5]
[1, 3, 2, 3, 4, 5]

[1, 1, 2, 3, 4, 5]

if (L, R) = (2, 3):
seg is now (2+v) + (3+v) = 5+2v
    = 3(3+1)/2

---------------

! OK, seems correct now. Too slow though.
Can I optimize out the log^2 part?

I basically keep asking: what's the first place that's <= cur?
Then I set some places to equal cur.

I think this could be a "only store the decreasing part of st_nofloor" situation.

I know I'll hit
    value 5 at position 8
    value 3 at position 10
    value 2 at position 16




.
