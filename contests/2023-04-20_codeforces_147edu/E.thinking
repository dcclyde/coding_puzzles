
Given a regular bracket sequence.
Repeatedly delete the rightmost (). Cost is always distance from there to the end.
    * Probably we can just flip the sequence and delete leftmost.

We get to do K operations. In each operation we move one bracket to anywhere.
K <= 5.

***********

Looking at the initial string,
what can we say about how much some of these parens will cost?


) at the end will cost 0.


( at start will cost 0.

(( at start costs 1.


A block of P 0s will cost binom(P, 2).


000001000


*****

Or, think about the )s aka 1s.
First guy's cost is idx-1
Second guy costs idx-3
then idx-5

I can just separately calculate the -1, -3, -5 stuff.
TODO remember to do this!
So I just care about the sum of idx.

Maybe:
Grab the rightmost ).
Find the first position where the RBS count stays >= 1 from here till the end?

If my string looks like (lots of stuff) (more stuff)

Let's say I have the "height function" of the string.

0, 1, 2, 3, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 1, 0
K = 3

((((()))))

0000011111


.





























