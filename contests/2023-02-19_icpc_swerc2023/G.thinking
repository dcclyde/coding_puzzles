N <= 1e6
time limit 0.5 seconds!

*****

N people, 2N-1 bottles.

Each person needs to be assigned a distinct interval.
Each interval has at least N items total
Each interval has exactly X Ws



If we want to feed everybody 3 white wines and N is 4
and we have some substring like R R R R W W W R R R R
then we could satisfy several people by choosing those Ws and different size
    prefix/suffix.

Given x, we can compute how many critics can be satsified.

This should immediately give a N^2 solution.

D would try:
    Look at the formulas that show up during the N^2 solution.
    Any chance we can "change order of summation" and get some result
        by summing something over the chunks of Rs?

    Find all [L, R] minimal spans containing X white wines.
    Suppose we have A, B red wines on left, right respectively.
    Then the number of critics satisfied here is like
        (A+1) * (B+1) - (num intervals)
    There will be nW - X + 1 such sources to consider.

N people.
If there's 1 white wine then this is easy.


Only W: need X = N.
One R and the rest W:

How does num satisfied critics change as a function of x?
    If we have only white wines: need X = N.



******************************************

For each starting point, consider the interval of size N starting here.
Track: number of whites, and number of extra trailing reds we could add if we want.

Now try a bunch of X values.

For a given X:
    Add stuff from intervals we've already considered.


****************

Proposed subproblem:
How many intervals are there that contain X whites and have size < N?
    Well, how many are there that end at R?


**********

First step: handle intervals with size < N.

For each W:
    What's the first W after me with distance > N?
    Insert an event: When I have X = (that wine) then I should start including
        the slack factor to my left.


*****

How many intervals are available total?
Choosing from 2N-1 objects and needing to be length >= N
    is basically the same as choosing from N objects and needing length >= 1.
Something like N^2 / 2.
I need to find N of these with the same number of Ws.


****

Simple random strategy:
Choose two Rs at random. They need to be distance at least N apart.
Ask how many Ws in between and try that value as X.
Repeat until it works.
Details:
    * If there is no R, then just output N.
    * If there is exactly one R:



Edge cases to think about:
? All Ws (very restrictive)
? Small N (may be restrictive)
? 0-2 of one color and the rest are the other color?


---

Suppose [L, R] has size 6
[P, Q] has size 11
    If N <= 6: no worries.
    If N > 11: score is 0.
    In between:

Say N = 8.
Start at far left: get 4 options.


Start at L: Need length between N and Q-L+1.
    There are Q - L - N options.

Start at k:
    Need length >= reaching R.
        * len >= R - k + 1
    Need length >= N
        * len >= N
    Need length not to stick out past Q.
        * len <= Q-k+1

I'd like to sum this over k from P up through L.

------------

I think my current random approach is actually normally quite fast,
but can be defeated by certain tricky inputs.
Example: 1e6 Rs, then 1e6-1 Ws.

.
