
I should probably be computing the answer for each position individually.

If last op is & then anything outside Sn will die.
If it's | then anything inside Sn will live.
If it's ^ then I'll basically get a flipped version of the n-1 answers.

Let's say I've processed previous sets and the appearance counts are like

0:  5
1:  8
2:  2
3:  4

{5, 8, 2, 4}


Now I want to process [0, 2].
If &: I get {0, 0, 2, 4}
If |: I get {3^s, 3^s, 2, 4}
If xor: I get {3^s - 5, 3^s - 8, 2, 4}

So overall, I guess I need a range update like x -> A - x.

Query 0: Just put em in.
Query 1: use s = 1?

Update the range: x -> 2 * 3^s - x.


0 0 0 1 1 1 0 0 0.

Now I want to process [4, 8].
If I pick inter, I'll get 0 0 0 0 1 1 0 0.
If I pick union, I'll get 0 0 0 1 1 1 1 1.
If I pick xor  , I'll get 0 0 0 1 0 0 1 1.

After 2 intervals, I always just have 2 * union?

Is this point in certain intervals?
0 0: 0
0 1: 1
1 0: 1
1 1: 1

After 3 intervals?
3 intervals is the same as 2 intervals and then later applying the third.
9 options total so far.
Seems like

0 0 0: 0
0 0 1: 6
0 1 1: 8?
1 1 1:


0 1 1:
    After 0 1, there are 2/3 ways for it to be on.
    Apply a 1:
        1/3 ways to have a 0 before. Then 2/3 ways to win.
        2/3 ways to have a 1 before. Then still 2/3 ways to win.

    Apply a 0:
        (b-a)/b ways to have a 0 before. Then 0 ways to win.
        a/b ways to have a 1 before. Then 2/3 ways to win.

Apply a 0:
    Multiply by 2?

Apply a 1:
    x = 2 * 3^s?



.
