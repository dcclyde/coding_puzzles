snippet compress "coordinate compression"
V<ll> uncompressed;
FOR(k, 0, N) {
    uncompressed.push_back(dat[k]);
}
remDup(uncompressed);
umap<ll,ll> uncinv;
FOR(k, 0, uncompressed.size()) {
    uncinv[uncompressed[k]] = k;
}
FOR(k, 0, N) {
    dat[k] = uncinv[dat[k]];
}
ll NN = uncompressed.size();
endsnippet

snippet rgraph "read graph from stdin"
V<V<ll>> G(N);
FOR(k, 0, E) {
    ll1(a, b);
    G[a].emplace_back(b);
    G[b].emplace_back(a);
}
dbgY(pdh(G));
endsnippet

snippet rtree "read tree from stdin"
V<V<ll>> G(N);
V<ll> parent(N); parent[0] = -1;
V<V<ll>> children(N);
FOR(a, 1, E+1) {
    ll1(b);
    G[a].emplace_back(b);
    G[b].emplace_back(a);
    parent[b] = a;
    children[a].emplace_back(b);
}
dbgY(pdh(G));
endsnippet

snippet dfsRecursive "DFS (recursive using lambda)"
V<ll> subtree_size(N);
auto dfs = [&](ll curr, ll parent, auto&& self) -> void {
    // work on parent
    subtree_size[curr] = 1;
    // todo
    $1
    for (auto& o : G[curr]) {
        if (o == parent) {continue;}
        self(o, curr, self);

        // update parent per child
        subtree_size[curr] += subtree_size[o];
        // todo
        $1
    }
    // update parent after all children
    // todo
    $1
    // dbgP(curr, parent, subtree_size[curr]);
};
dfs(ROOT, -1, dfs);
$2
endsnippet

snippet interact
ll ask(ll a) {
    cout << "? ";
    ps1(a);
    cout << flush;
    lls(out);
    return out;
}
void finish(ll a) {
    cout << "! ";
    ps1(a);
    cout << flush;
    return;
}
endsnippet

snippet check "check solve() vs brute()"
void check() {
    for(auto& N : {30}) {
        ll br = brute(N); el;
        ll so = solve(N); el;
        dbgY(N, MP(br, so));
        assert(br == so);
        el;
    }
    FOR(N, 1, 1001) {
        ll br = brute(N); el;
        ll so = solve(N); el;
        dbgY(N, MP(br, so));
        assert(br == so);
        el;
    }
}
endsnippet
